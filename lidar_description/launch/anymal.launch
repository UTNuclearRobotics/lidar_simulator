<?xml version="1.0" ?>
<launch>

  <node
      name    = "map_to_base_broadcaster"   pkg = "tf"   type = "static_transform_publisher"
      args    = "0.0 0.0 0.0   0.0 0.0 0.0   /base_footprint /LH_FOOT    100">
  </node>

  <!-- Add in model -->
  <env name="GAZEBO_MODEL_PATH" value="$(find lidar_description)/models"/>

  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="$(find lidar_description)/world/test.world"/>
  <arg name="extra_gazebo_args" default="--verbose"/>

  <!-- Start gazebo and load the world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <!-- <arg name="use_sim_time" value="false"/> -->
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Spawn in example robot -->
  <arg name="gpu" default="false"/>
  <arg name="organize_cloud" default="false"/>
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find spot_description)/urdf/spot_lidar.urdf.xacro' organize_cloud:=$(arg organize_cloud) gpu:=$(arg gpu)" /> -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find anymal_c_simple_description)/urdf/anymal.urdf' organize_cloud:=$(arg organize_cloud) gpu:=$(arg gpu)" />
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find spot_lidar_description)/urdf/spot.urdf' organize_cloud:=$(arg organize_cloud) gpu:=$(arg gpu)" /> -->
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find spot_lidar_description)/urdf/spot_full.urdf.xacro' organize_cloud:=$(arg organize_cloud) gpu:=$(arg gpu)" /> -->
  <node pkg="gazebo_ros" type="spawn_model" name="spawn_model" args="-urdf -param /robot_description -model example"/>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>



  <!-- * Adding in stuff to publish the robot states -->
  <arg name="use_gui" default="false" />
  <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
        MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>
  <!-- If desired, a GUI version is available allowing to move the simulated robot around manually
        This corresponds to moving around the real robot without the use of MoveIt. -->
  <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" /> -->



  <!-- RViz -->
  <arg name="rviz" default="true"/>
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="$(anon rviz)" respawn="false" output="screen" args="-d $(find lidar_description)/rviz/example.rviz" />

</launch>
